class Solution {
public:
    int subarraysDivByK(vector<int>& nums, int k) {
        
    // create a hash array to count frequency
    // of remainders
    int modCount[k];
    memset(modCount, 0, sizeof(modCount));
 
    // Traverse original array and compute cumulative
    // sum take remainder of this current cumulative
    // sum and increase count by 1 for this remainder
    // in mod[] array
    int cumulativeSum = 0;
    for (int i : nums) {
        cumulativeSum += i;
 
        // as the sum can be negative, taking modulo twice
        modCount[(cumulativeSum%k + k) % k]++;   
    }
 
    int result = 0; // Initialize result
 
    // Traverse mod[]
    for (int i : modCount)
 
        // If there are more than one prefix subarrays
        // with a particular mod value.
        if (i > 1)
            result += (i * (i - 1)) / 2; //this is just "n choose 2"
 
    // add the elements which are divisible by k itself
    // i.e., the elements whose sum = 0
    result += modCount[0];
 
    return result;
        
    }
};



// Driver program to run the case
int main()
{
    int arr[] = { 4, 5, 0, -2, -3, 1 };
    int k = 5;
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << subCount(arr, n, k) << endl;
    int arr1[] = { 4, 5, 0, -12, -23, 1 };
    int k1 = 5;
    int n1 = sizeof(arr1) / sizeof(arr1[0]);
    cout << subCount(arr1, n1, k1) << endl;
    return 0;
}
 
// This code is corrected by Ashutosh Kumar


class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int result = 0;
        int currentSum = 0;
        std::map<int, int> prefixSums;

        //Initialize base case 
        prefixSums[0] = 1;

        for (int i : nums) {
            currentSum += i;
            int diff = currentSum - k;
            result += prefixSums[diff];
            prefixSums[currentSum]++;
        }

        return result;
    }
};